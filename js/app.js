// Generated by CoffeeScript 1.6.2
(function() {
  var HomeController;

  HomeController = function($scope, $http) {
    var save_food, save_plans, sfood, splans;

    sfood = localStorage.getItem('selected_food');
    $scope.selected_food = (sfood && JSON.parse(sfood)) || [];
    splans = localStorage.getItem('saved_plans');
    $scope.saved_plans = (splans && JSON.parse(splans)) || {};
    $scope.calories = localStorage.getItem('calories') || '2000';
    $scope.$watch('calories', function() {
      return localStorage.setItem('calories', $scope.calories);
    });
    $http.get('/nutricount/data/food.json').success(function(food) {
      return $scope.food = food;
    });
    $http.get('/nutricount/data/values.json').success(function(nutrients) {
      $scope.nutrients = nutrients;
      nutrients = _.keys(nutrients);
      $scope.nutrients1 = nutrients.slice(0, 8);
      $scope.nutrients2 = nutrients.slice(7, 16);
      return $scope.nutrients3 = nutrients.slice(16, 26);
    });
    save_food = function() {
      return localStorage.setItem('selected_food', JSON.stringify($scope.selected_food));
    };
    save_plans = function() {
      return localStorage.setItem('saved_plans', JSON.stringify($scope.saved_plans));
    };
    $scope.itemsExist = function() {
      return $scope.selected_food[0];
    };
    $scope.clear = function() {
      return $scope.selected_food = [];
    };
    $scope.save = function() {
      var name;

      name = prompt('What would you like to save this as?');
      if (name) {
        $scope.saved_plans[name] = _.map($scope.selected_food, function(food) {
          return _.clone(food);
        });
        return save_plans();
      }
    };
    $scope.loadPlan = function(plan) {
      return $scope.selected_food = _.map(plan, function(food) {
        return _.clone(food);
      });
    };
    $scope.removePlan = function(plan) {
      delete $scope.saved_plans[plan];
      return save_plans();
    };
    $scope.foodSelect = function() {};
    $scope.addFood = function() {
      var food;

      food = _.find($scope.food, function(food) {
        return food.name === angular.element('select').val();
      });
      if (food) {
        sfood = _.find($scope.selected_food, function(sfood) {
          return sfood.name === food.name;
        });
        if (sfood) {
          $scope.addServing(sfood);
        } else {
          food.servings = 1;
          $scope.selected_food.push(food);
          save_food();
        }
        return angular.element('select').select2('val', '');
      }
    };
    $scope.removeFood = function(food) {
      if (food.servings > 1) {
        food.servings -= 1;
      } else {
        $scope.selected_food = _.reject($scope.selected_food, function(selected_food) {
          return selected_food === food;
        });
      }
      return save_food();
    };
    $scope.addServing = function(food) {
      food.servings += 1;
      return save_food();
    };
    $scope.calculate = function(nutrient) {
      var num;

      num = 0;
      _.each($scope.selected_food, function(food) {
        var amount;

        amount = parseFloat(food[nutrient]);
        if (amount) {
          return _(food.servings).times(function() {
            return num += amount;
          });
        }
      });
      return Math.round(num * 100) / 100;
    };
    $scope.calculate_total = function(nutrient) {
      if (nutrient === 'Calories (kcal)') {
        return $scope.calories;
      } else {
        return Math.round(($scope.nutrients[nutrient] * ($scope.calories / 2000)) * 100) / 100;
      }
    };
    $scope.separator = function(nutrient) {
      if (nutrient === 'Total Fat (g)' || nutrient === 'Saturated Fat (g)' || nutrient === 'Sodium (mg)') {
        return ' < ';
      } else {
        return ' / ';
      }
    };
    return $scope.nutrientStatus = function(nutrient) {
      var percent_done;

      percent_done = Math.round($scope.calculate(nutrient) / $scope.calculate_total(nutrient) * 100) / 100;
      if (percent_done < 0.75) {
        if (nutrient === 'Total Fat (g)' || nutrient === 'Saturated Fat (g)' || nutrient === 'Sodium (mg)') {
          return 'done';
        } else {
          return 'insufficient';
        }
      } else if ((1 > percent_done && percent_done >= 0.75)) {
        return 'close';
      } else if (1 <= percent_done) {
        if (nutrient === 'Total Fat (g)' || nutrient === 'Saturated Fat (g)' || nutrient === 'Sodium (mg)') {
          return 'insufficient';
        } else {
          return 'done';
        }
      }
    };
  };

  angular.module('nutricount', ['ui']).provider('authService', function() {
    var buffer;

    buffer = [];
    this.pushToBuffer = function(config, deferred) {
      return buffer.push({
        config: config,
        deferred: deferred
      });
    };
    this.$get = [
      '$rootScope', '$injector', function($rootScope, $injector) {
        var $http, retry, retryAll;

        retry = function(config, deferred) {
          var $http;

          $http = $http || $injector.get('$http');
          return $http(config).then(function(rsp) {
            return deferred.resolve(rsp);
          });
        };
        retryAll = function() {
          var i;

          i = 0;
          while (i < buffer.length) {
            retry(buffer[i].config, buffer[i].deferred);
            ++i;
          }
          return buffer = [];
        };
        $http = void 0;
        return {
          loginConfirmed: function() {
            $rootScope.$broadcast('auth:loginConfirmed');
            return retryAll();
          }
        };
      }
    ];
    return '';
  }).directive('init', function($http, $timeout, authService) {
    return function(scope) {
      window.scope = scope;
      scope.form = {};
      scope.$on('auth:loginRequired', function() {
        console.log('yo');
        return angular.element('#login').bPopup({
          modalClose: false
        }, function() {
          return angular.element('#login input[type=email]').focus();
        });
      });
      scope.login = function() {
        angular.element('#login').bPopup().close();
        return $http({
          method: 'POST',
          url: '/login',
          data: $.param({
            email: this.form.email,
            password: this.form.password
          }),
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        }).success(function(rsp, status, headers) {
          if (rsp.success) {
            scope.form = {};
            return authService.loginConfirmed();
          } else {
            return scope.$broadcast('auth:loginRequired');
          }
        });
      };
      scope.signup = function() {
        angular.element('#signup').bPopup().close();
        if (this.form.password === this.form.password_confirmation) {
          return $http({
            method: 'POST',
            url: '/register',
            data: $.param({
              name: this.form.name,
              email: this.form.email,
              password: this.form.password
            }),
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            }
          }).success(function(rsp, status, headers) {
            scope.form = {};
            if (rsp.success) {
              return authService.loginConfirmed();
            }
          });
        }
      };
      scope.signup_link = function() {
        angular.element('#login').bPopup().close();
        return $timeout(function() {
          angular.element('#signup').bPopup({
            modalClose: false
          });
          return angular.element('#signup input[type=text]:first').focus();
        }, 400);
      };
      return scope.signin_link = function() {
        angular.element('#signup').bPopup().close();
        return $timeout(function() {
          angular.element('#login').bPopup({
            modalClose: false
          });
          return angular.element('#login input[type=email]').focus();
        }, 400);
      };
    };
  }).config([
    '$routeProvider', '$locationProvider', '$httpProvider', 'authServiceProvider', function($routeProvider, $locationProvider, $httpProvider, authServiceProvider) {
      var interceptor;

      interceptor = [
        '$rootScope', '$q', function($rootScope, $q) {
          var error, success;

          success = function(rsp) {
            return rsp;
          };
          error = function(rsp) {
            var deferred;

            console.log(rsp.headers());
            if (rsp.status === 401) {
              console.log('err');
              deferred = $q.defer();
              authServiceProvider.pushToBuffer(rsp.config, deferred);
              $rootScope.$broadcast('auth:loginRequired');
              return deferred.promise;
            } else {
              return $q.reject(rsp);
            }
          };
          return function(promise) {
            return promise.then(success, error);
          };
        }
      ];
      $httpProvider.responseInterceptors.push(interceptor);
      $routeProvider.when('/nutricount', {
        templateUrl: '/nutricount/partials/home.html',
        controller: HomeController
      }).otherwise({
        redirectTo: '/nutricount'
      });
      return $locationProvider.html5Mode(true);
    }
  ]);

}).call(this);
